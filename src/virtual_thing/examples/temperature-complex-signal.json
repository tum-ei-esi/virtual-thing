{
    "title": "TemperatureComplex",
    "description": "This thing simualates a temperature signal as a sum of sinusoids with a sampling rate of 1 Hz.",

    "properties": {
        "temperature": {
            "type": "number",
            "readOnly": true,
            "processes": {
                "read": {
                    "instructions": [
                        {
                            "move": {
                                "from": {"pointer": "/proc/signalGenerator/dmap/output"},
                                "to": {"pointer": "../o"}
                            }
                        }
                    ]
                }
            }
        }
    },

    "processes": {

        "signalGenerator": {
            "comment": ["This is a reusable signal generator. It generates",
                            "a signal by sampling a sum of sine waves according",
                            "to the parameters in the 'dataMap'. A new sample",
                            "value is written to the 'output' in the 'dataMap',",
                            "from where it can be accessed by other components.",
                            "Logging of values can be enabled/disabled using",
                            "the 'log' in the 'dataMap'"],
            "dataMap": {        
                "log": {"const": true},
                "output": {"type": "number"},                
                "samplingIntervalMs": {"const": 1000},
                "dcOffset": {"const": 20},                
                "periodsMs": {"const": [ 40000, 30000, 20000, 10000, 5000 ]},
                "phaseShiftsRad": {"const": [ 0, 1, 2, 3, 4 ]},
                "amplitudes": {"const": [ 2, 1, 0.5, 0.2, 0.1 ]}
            },
            "triggers": [{"interval": "${./dmap/samplingIntervalMs}"}],
            "instructions": [
                {
                    "move": {
                        "from": {
                            "math": [
                                "sum(",
                                    "dotMultiply(",
                                        "${./dmap/amplitudes},",
                                        "sin(",
                                            "2 * pi",
                                            " * dotDivide(${dt/unix} % ${./dmap/periodsMs}, ${./dmap/periodsMs})",
                                            " + ${./dmap/phaseShiftsRad})))",
                                "+ ${./dmap/dcOffset}"
                            ]
                        },
                        "to": {"pointer":"./dmap/output"}
                    }
                },
                {
                    "ifelse": {
                        "if": {
                            "condition": "${./dmap/log}",
                            "instructions": [{"log": "${processPath}: ${./dmap/output}" }]
                        }
                    } 
                }
            ]
        }
    }
}